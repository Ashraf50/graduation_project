// Mocks generated by Mockito 5.4.6 from annotations
// in graduation_project/test/features/flat/view_model/flat_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:graduation_project/core/error/failure.dart' as _i6;
import 'package:graduation_project/feature/flat/domain/repository/repo/flat_repo_contract.dart'
    as _i2;
import 'package:graduation_project/feature/flat/domain/use_case/add_flat_with_image_use_case.dart'
    as _i4;
import 'package:image_picker/image_picker.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFlatRepoContract_0 extends _i1.SmartFake
    implements _i2.FlatRepoContract {
  _FakeFlatRepoContract_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddFlatWithImageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddFlatWithImageUseCase extends _i1.Mock
    implements _i4.AddFlatWithImageUseCase {
  MockAddFlatWithImageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FlatRepoContract get flatRepoContract => (super.noSuchMethod(
        Invocation.getter(#flatRepoContract),
        returnValue: _FakeFlatRepoContract_0(
          this,
          Invocation.getter(#flatRepoContract),
        ),
      ) as _i2.FlatRepoContract);

  @override
  set flatRepoContract(_i2.FlatRepoContract? _flatRepoContract) =>
      super.noSuchMethod(
        Invocation.setter(
          #flatRepoContract,
          _flatRepoContract,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> uploadFlat({
    required String? numOfRoom,
    required String? numOfBathroom,
    required String? price,
    required String? description,
    required String? space,
    required String? landlordID,
    required List<_i7.XFile>? images,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFlat,
          [],
          {
            #numOfRoom: numOfRoom,
            #numOfBathroom: numOfBathroom,
            #price: price,
            #description: description,
            #space: space,
            #landlordID: landlordID,
            #images: images,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
            _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #uploadFlat,
            [],
            {
              #numOfRoom: numOfRoom,
              #numOfBathroom: numOfBathroom,
              #price: price,
              #description: description,
              #space: space,
              #landlordID: landlordID,
              #images: images,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, String>>);
}
